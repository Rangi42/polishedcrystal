ApplyPartyPatches:
	; #1: callback, will receive party pointer, nickname pointer, OT pointer, location (0 = party, 1 = box, 2 = daycare)
	push #e
	push #d
	push #c
	push #b
	push #a
	set #a, #1

	; apply patches to party pokemon
	set #1, 5
	call GetGameDataOffsetConstant
	set #1, #result
	call GetGameDataPointer
	seek #result
	readbyte #temp
	add #1, #result, 8 ; still skip deprecated wPartySpecies
	add #2, #result, 0x163 ; wPartyMon1Nickname - wPartyCount
	add #3, #result, 0x121 ; wPartyMon1OT - wPartyCount
	set #4, #zero
	callnz #temp, .apply_to_list

	; apply patches to daycare man pokemon
	set #1, 6
	call GetGameDataOffsetConstant
	set #1, #result
	call GetGameDataPointer
	seek #result
	readbyte #temp
	shiftleft #temp, 31 ; nonzero if bit 0 is set
	callnz #temp, .daycare_mon

	; apply patches to daycare lady pokemon
	set #1, 7
	call GetGameDataOffsetConstant
	set #1, #result
	call GetGameDataPointer
	seek #result
	readbyte #temp
	shiftleft #temp, 31
	; there are two extra bytes for the daycare lady we need to skip
	; (#1 should end up on sBreedmon2, not sBreedmon2Item)
	readhalfword #result ; move file pointer ahead
	pos #result
	callnz #temp, .daycare_mon

	; apply patches to box pokemon
	set #b, sBoxMons1
	call .box_loop
	set #b, sBoxMons2
	call .box_loop
	pop #a
	pop #b
	pop #c
	pop #d
	pop #e
	return

.box_loop
	; note that unlike vanilla box, newbox combines nickname and OT data into the mon struct, so they're handled slightly differently
	seek #b
	set #temp, 167 ; mons per save bank
	set #1, #b
	add #2, #b, 32
	add #3, #b, 42
	set #4, 1
	jump .apply_to_list

.daycare_mon
	add #1, #result, 23 ; for daycare struct, nickname and OT come before species
	add #2, #result, 1
	add #3, #result, 12
	set #4, 2
	rotateleft #temp, 1
.apply_to_list
	; #temp -> #d = count, #1 = mon species, #2 = mon nickname, #3 = mon OT
	; #4 -> #e = 0 (party), 1 (box), 2 (daycare)
	set #d, #temp
	set #e, #4
.loop
	push #3
	push #2
	push #1
	set #4, #e
	call #a
	pop #1
	pop #2
	pop #3
	set #temp, NAME_LENGTH
	set #4, PARTYMON_STRUCT_LENGTH
	jumpz #e, .length_OK
	set #4, BOXMON_STRUCT_LENGTH
	add #2, #4
	add #3, #4
	subtract #2, #temp
	subtract #3, #temp
.length_OK
	add #1, #4
	add #2, #temp
	add #3, #temp
	decrement #d
	jumpnz #d, .loop
	return
