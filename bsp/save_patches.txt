ConvertToNewbox:
	set #a, #zero ; [0, 14)
	set #temp, 57
	seek sBoxMons1UsedEntries
	fillbyte #temp, #zero
	seek sBoxMons2UsedEntries
	fillbyte #temp, #zero

.box_outer_loop
	set #source, sBox1_v6
	iflt #a, 7, .got_source
	set #source, sBox8_v6
.got_source
	remainder #temp, #a, 7
	mulacum #source, #temp, BOX_SIZE_v6
	seek #source ; we are now at sBox#Count
	readbyte #b ; box count, we are now at sBox#Species

	set #length, #zero
	set #2, sBox_v6
.copy_temp_loop
	ifge #length, #b, .done_temp_loop
	add #1, #source, 22  ; we are now at sBox#Mon1
	mulacum #1, #length, 32
	set #3, 22 ; mon struct up to PP
	call CopyFrom1To2

; condense 4 PP bytes into one byte for PP Ups
	seek #1
	readword #temp
	pos #1
	and #temp, 0xC0C0C0C0
.pp_up_loop
	shiftright #temp, 6
	or #3, #temp ; #3 is already set to zero thanks to CopyFrom1To2
	ifne #temp, #zero, .pp_up_loop
	seek #2
	writebyte #3
	increment #2
	set #3, 6 ; remainder of mon struct
	call CopyFrom1To2

; set aside hyper training bytes
	push #2
	add #2, 3
; copy nick
	add #1, 828
	mulacum #1, #length, -21 ; offset from box mon n + 1 to nickname n
	set #3, 10
	call CopyFrom1To2
; copy OT
	subtract #1, 230 ; offset from nickname n+1 to OT n
	set #3, 7
	call CopyFrom1To2
	increment #1 ; skip excess terminator byte (always 0x53)
	set #4, #2
; copy hyper training bytes
	pop #2
	set #3, 3
	call CopyFrom1To2
	set #2, #4
	increment #length
	jump .copy_temp_loop

.done_temp_loop
	seek sBoxMons1UsedEntries
	iflt #a, 7, .got_entries
	seek sBoxMons2UsedEntries
.got_entries
	remainder #1, #a, 7
	multiply #1, 20
	add #length, #1, #b
	set #2, 1
.set_flags_loop
	ifge #1, #length, .done_flags_loop
	push #1
	call FlagAction
	pop #1
	increment #1
	jump .set_flags_loop

.done_flags_loop
	set #1, sBox_v6
	seek #1
	set #length, #b
; begin calculating 16-bit checksum for each box pokemon
.encode_outer_loop
	jumpz #length, .done_encode_loop
	set #2, #zero
	set #result, 127
.mon_struct_loop
	increment #2
	readbyte #3
	mulacum #result, #3, #2
	iflt #2, 32, .mon_struct_loop
; convert nickname/OT chars to 7-bit, accounting for special chars
	increment #2 ; one multiplier (33) is skipped upon checksum calculation
	pushpos
.nickname_ot_loop
	increment #2
	getfilebyte #3
	set #temp, 0xfa
	ifeq #3, 0x7f, .replace
	increment #temp
	ifeq #3, 0x53, .replace
	increment #temp
	jumpnz #3, .remove_bit
.replace
	set #3, #temp
.remove_bit
	and #3, 0x7f
	writebyte #3
	mulacum #result, #3, #2
	iflt #2, 50, .nickname_ot_loop
; write checksum for each 16 lower bits (starting with MSB) into encoded nickname/OT chars
	poppos
	rotateleft #result, -15
	set #2, 16
.write_checksum_loop
	getfilebyte #3
	shiftleft #temp, #result, 7
	or #3, #temp
	writebyte #3
	rotateleft #result, 1
	decrement #2
	jumpnz #2, .write_checksum_loop
	readbyte #temp ; skip the 17th byte in nick+OT
	decrement #length
	jump .encode_outer_loop

.done_encode_loop
; copy all of temp back to pokedb (#1 is already set to sBox_v6)
	remainder #temp, #a, 7
	multiply #temp, BOX_SIZE
	add #2, sBoxMons1, #temp
	iflt #a, 7, .got_target
	add #2, sBoxMons2, #temp
.got_target
	multiply #3, #b, 49
	call CopyFrom1To2

; clear out bytes from last pokedb entry to next box (or used entry flags)
	increment #a
	set #1, sBoxMons2UsedEntries
	ifeq #a, 14, .next
	set #1, sBoxMons1UsedEntries
	ifeq #a, 7, .next
	set #1, sBox1_v6
	iflt #a, 7, .got_source_2
	set #1, sBox8_v6
.got_source_2
	remainder #temp, #a, 7
	mulacum #1, #temp, BOX_SIZE_v6
.next
	subtract #1, #2
	seek #2
	fillbyte #1, #zero
	iflt #a, 14, .box_outer_loop

; we can now fill sBackupNewBox with newbox
	set #a, #zero
	set #target, sBackupNewBox1
	set #source, sBoxMons1UsedEntries
	call .newbox_outer_loop

	; #a = 7, #target = sBackupNewBox8
	set #source, sBoxMons2UsedEntries
	call .newbox_outer_loop

; add boxes 15 and 16
	seek #target ; sBackupNewBox15
	set #1, 0x1B ; our exit condition, since box 15 has default theme 0x1B and box 16 has default theme 0x1C
	set #2, .box15
	set #3, 6
.add_box_loop
	fillbyte 23, #zero ; clear out box 15/16
	writedata #2, #3
	add #2, #3
	fillbyte 3, #zero
	writebyte #1
	increment #1
	iflt #1, 0x1D, .add_box_loop

; shift link battle/HOF/battle tower data to end of box names
	set #1, 3499
	set #2, 292
	call ShiftSaveDataBack
	decrement #2
	fillbyte #2, #zero

; copy backup new box into active new box
	set #1, sBackupNewBox1
	set #2, sNewBox1
	subtract #3, sBackupNewBox1, sNewBox1
	call CopyFrom1To2

; clear old box names
	set #1, BOX_NAMES_OFFSET
	call GetGameDataPointer
	seek #result
	fillbyte 126, #zero

; clear wEggMon (removed as part of newbox)
	set #1, EGG_MON_NICK_OFFSET
	call GetGameDataPointer
	seek #result
	fillbyte 54, #zero
	return

.newbox_outer_loop
	set #length, #zero
.copy_flags_loop
	seek #source
	remainder #1, #a, 7
	multiply #1, 20
	add #1, #length
	set #2, #source ; we know #source > 2
	push #1
	call FlagAction
	pop #1
	increment #1
	seek #target
	jumpz #result, .got_value ; write 0 if flag is cleared
	set #result, #1
.got_value
	writebyte #result
	increment #target
	increment #length
	iflt #length, 20, .copy_flags_loop

; set sram bank (0 for box1-7, 1 for box8-14)
	set #temp, #zero
	iflt #a, 7, .sram_bank_2
	decrement #temp
.sram_bank_2
	fillbyte 3, #temp
	add #target, 3 ; target now points at box name

	set #1, BOX_NAMES_OFFSET
	call GetGameDataPointer
	set #3, 9
	multiply #1, #a, #3
	add #1, #result
	set #2, #target
	add #target, #3
	call CopyFrom1To2

	set #1, .default_themes
	add #1, #a
	getbyte #temp, #1
	writebyte #temp
	increment #target
	increment #a
	remainder #temp, #a, 7
	jumpnz #temp, .newbox_outer_loop
	return

.box15
	db 0x81, 0xae, 0xb7, 0xe1, 0xe5, 0x53 ; "Box15@"

.box16
	db 0x81, 0xae, 0xb7, 0xe1, 0xe6, 0x53 ; "Box16@"

.default_themes
	db 0x17, 0x15, 0x16, 0x18, 0x0D, 0x19, 0x0C, 0x0E, 0x12, 0x0F, 0x10, 0x11, 0x1A, 0x13

ChangeCheckValue:
	set #temp, sCheckValue1
	ifeq #savefile, 1, .next
	set #temp, sBackupCheckValue1
.next
	seek #temp
	writebyte 0x61
	return

ConvertUnownDexToBitArray:
	set #1, UNOWN_DEX_OFFSET_v7
	call GetGameDataPointer
	seek #result
	getfileword #2
	writeword #zero

.dex_loop_1
	and #1, #2, 0xff
	jumpz #1, .done_loop_1
	decrement #1
	push #2
	call .set_flag
	pop #2
	shiftright #2, 8 ; TODO: check if this should be shiftleft instead
	jump .dex_loop_1

.done_loop_1
	pushpos
	set #length, 24
.dex_loop_2
	readbyte #1
	jumpz #1, .done_loop_2
	decrement #1
	call .set_flag
	decrement #length
	jumpnz #length, .dex_loop_2

.done_loop_2
	poppos
	fillbyte 24, #zero
	seek #result
	getfileword #result
	writeword #zero
	seekfwd 20
	writeword #zero
	return

.set_flag
	pushpos
	seek #result
	push #result
	set #2, 1
	call FlagAction
	pop #result
	poppos
	return

ConvertMonIndexesTo9Bit:
; First, we need to shift existing caught flags into their new indexes,
; then we need to shift caught data/unown dex forward to account for the bigger seen flag array
; (we've already converted unown dex to a flag array, so we have a buffer to work with).
; We'll handle caught data for forms later.
	set #1, POKEDEX_CAUGHT_OFFSET
	call GetGameDataPointer
	seek #result
	set #1, 32
	set #2, 8
	call ShiftSaveDataBack
	writeword #zero
	writeword #zero ; effectively fillbyte 8, #zero

	set #r0, .mon_indexes
	set #r1, .mon_forms

; modify pokedex flags
	seek #result
	set #1, 320
	set #2, #r0
	jump ShiftFlags

	seekfwd 40
	set #1, 320
	set #2, #r0
	jump ShiftFlags

	set #1, .mon_callback
	jump ApplyPartyPatches ; normally, I'd generalize this (as in AdjustPokemonIndexes), but there's some special cases here

.mon_callback
	seek #1
	getfilebyte #result
	set #address, #r0
.index_loop
	gethalfwordinc #temp, #address ; get offset index upper bound
	ifeq #temp, 0xffff, .done_loop
	gethalfwordinc #offset, #address ; get offset
	ifgt #result, #temp, .index_loop
	add #result, #offset
.done_loop
	iflt #result, 0xff, .got_result
	pushpos
	seekfwd 21 ; to extspecies
	getfilebyte #temp
	add #temp, 0x20
	writebyte #temp
	poppos
	subtract #result, 0xfe
.got_result
	writebyte #result

	; Special case for Pikachu, need to set fly form or surf form
	ifeq #result, 0x19, .not_pikachu ; mons like Sirfetch'd ($119) didn't exist yet, so there's no conflicts
	readbyte #temp ; item -> moves
	readword #temp ; all four moves
.move_loop
	and #1, #temp, 0xff
	jumpz #1, .done
	set #2, 2 ; FLY_FORM
	ifeq #1, 0x13, .got_form
	increment #2 ; SURF_FORM
	shiftright #temp, 8
	ifne #1, 0x39, .move_loop
.got_form
	seekfwd 15 ; (ID -> form)
	getfilebyte #1
	and #1, 0xe0 ; ~FORM_MASK
	or #1, #2
	writebyte #1
	jump .done

.not_pikachu
	; Galarian form indexes shift from 2 to 3, and Pokedex flags need to be set
	set #address, #r1
.form_loop
	getbyteinc #1, #address
	ifeq #1, 0xff, .done
	getbyteinc #2, #address
	ifne #1, #result, .form_loop

	seekfwd 20 ; to forms (file pointer is at items here, not species)
	getfilebyte #3
	and #temp, #3, 0x20 ; check extspecies
	jumpz #temp, .done
	and #temp, #3, FORM_MASK
	ifeq #temp, #2, .set_pokedex
	ifne #temp, 2, .done ; special case where Galarian form now = 3, not 2
	ifne #2, 3, .done

	increment #temp
	writebyte #temp
.set_pokedex
	set #1, POKEDEX_CAUGHT_OFFSET
	call GetGameDataPointer
	seek #result
	subtract #temp, #address, #r1 ; get the form+species index of the current variant form, needed for pokedex flags
	shiftright #temp, 1
	add #1, #temp, 0x118 ; note that #temp is off by +1 for actual index, since #address is +2 bytes ahead of form actually being checked
	set #2, 1
	push #1
	call FlagAction
	pop #1
	seekfwd 40
	call FlagAction
	
.done
	ifeq #4, 1, FixNewboxChecksum
	return

.mon_indexes
	; upper bound, offset
	dh 0x14, 0   ; RATICATE
	dh 0x16, 162 ; AZUMARILL
	dh 0x6b, 0   ; HITMONCHAN
	dh 0x74, 1   ; SEADRA
	dh 0x76, 57  ; TOGETIC
	db 0x77, 152 ; TOGEKISS
	dh 0xac, 0   ; PICHU
	dh 0xad, 89  ; MUNCHLAX
	dh 0xae, 91  ; MAGNEZONE
	dh 0xb0, 92  ; TANGROWTH
	dh 0xb6, 0   ; BELLOSSOM
	dh 0xb8, 2   ; SUDOWOODO
	dh 0xbb, 6   ; YANMA
	dh 0xbc, 84  ; YANMEGA
	dh 0xc1, 5   ; MURKROW
	dh 0xc2, 64  ; HONCHKROW
	dh 0xc4, 4   ; MISDREAVUS
	dh 0xc5, 60  ; MISMAGIUS
	dh 0xcc, 3   ; GLIGAR
	dh 0xcd, 70  ; GLISCOR
	dh 0xd5, 2   ; SNEASEL
	dh 0xd6, 50  ; WEAVILE
	dh 0xdc, 1   ; PILOSWINE
	dh 0xdd, 55  ; MAMOSWINE
	dh 0xe0, 0   ; OCTILLERY
	dh 0xe8, 1   ; PORYGON2
	dh 0xe9, 44  ; PORYGON_Z
	dh 0xec, 1   ; HITMONTOP
	dh 0xed, 2   ; ELEKID
	dh 0xee, 31  ; ELECTIVIRE
	dh 0xef, 1   ; MAGBY
	dh 0xf0, 30  ; MAGMORTAR
	dh 0xfb, 0   ; CELEBI
	dh 0xfd, 21  ; GLACEON
	dh 0xfe, 24  ; SYLVEON
	dh -1

.mon_forms:
	db 0x82, 18 ; GYARADOS, RED
	db 0x96, 2 ; MEWTWO, ARMORED
	db 0x13, 2 ; RATTATA, ALOLAN
	db 0x14, 2 ; RATICATE, ALOLAN
	db 0x1a, 2 ; RAICHU, ALOLAN
	db 0x1b, 2 ; SANDSHREW, ALOLAN
	db 0x1c, 2 ; SANDSLASH, ALOLAN
	db 0x25, 2 ; VULPIX, ALOLAN
	db 0x26, 2 ; NINETALES, ALOLAN
	db 0x32, 2 ; DIGLETT, ALOLAN
	db 0x33, 2 ; DUGTRIO, ALOLAN
	db 0x34, 2 ; MEOWTH, ALOLAN
	db 0x35, 2 ; PERSIAN, ALOLAN
	db 0x4a, 2 ; GEODUDE, ALOLAN
	db 0x4b, 2 ; GRAVELER, ALOLAN
	db 0x4c, 2 ; GOLEM, ALOLAN
	db 0x58, 2 ; GRIMER, ALOLAN
	db 0x59, 2 ; MUK, ALOLAN
	db 0x67, 2 ; EXEGGUTOR, ALOLAN
	db 0x69, 2 ; MAROWAK, ALOLAN
	;db 0x34, 3 ; MEOWTH, GALARIAN
	db 0x4d, 3 ; PONYTA, GALARIAN
	db 0x4e, 3 ; RAPIDASH, GALARIAN
	db 0x4f, 3 ; SLOWPOKE, GALARIAN
	db 0x50, 3 ; SLOWBRO, GALARIAN
	;db 0x53, 3 ; FARFETCH_D, GALARIAN
	db 0x6e, 3 ; WEEZING, GALARIAN
	;db 0x7a, 3 ; MR__MIME, GALARIAN
	db 0x90, 3 ; ARTICUNO, GALARIAN
	db 0x91, 3 ; ZAPDOS, GALARIAN
	db 0x92, 3 ; MOLTRES, GALARIAN
	db 0xc7, 3 ; SLOWKING, GALARIAN
	;db 0xde, 3 ; CORSOLA, GALARIAN
	db -1

ConvertPokerusToNybble:
; If a mon has an active infection, it will get reset
; to its full days count. Cured infections remain cured
	set #1, .mon_callback
	call ApplyPartyPatches

.mon_callback
	add #1, POKERUS_OFFSET
	seek #1
	getfilebyte #1
	retz #1
	set #2, 0xf
	and #temp, #1, #2
	set #result, 13
	jumpz #temp, .got_value
	rotateleft #temp, #1, -4
	and #temp, #2
	remainder #temp, 4
	subtract #temp, 32, #temp
	rotateleft #result, #2, #temp
.got_value
	writebyte #result
	return

ShiftHiddenGrottoContents:
	set #1, CELEBI_EVENT_OFFSET
	call GetGameDataPointer
	seek #result
	set #1, 76
	set #2, 23
	call ShiftSaveDataBack

.shift_loop
	writebyte #zero
	decrement #2
	retz #2
	set #1, 2
	call ShiftSaveDataBack
	jump .shift_loop
